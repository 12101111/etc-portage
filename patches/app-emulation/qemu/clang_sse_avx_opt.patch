diff --git a/configure b/configure
index 9a79a00..b82d04c 100755
--- a/configure
+++ b/configure
@@ -3872,8 +3872,12 @@ fi
 
 if test "$cpuid_h" = "yes" && test "$avx2_opt" != "no"; then
   cat > $TMPC << EOF
+#ifdef __clang__
+#pragma clang attribute push (__attribute__((target("avx2"))), apply_to=function)
+#else
 #pragma GCC push_options
 #pragma GCC target("avx2")
+#endif
 #include <cpuid.h>
 #include <immintrin.h>
 static int bar(void *a) {
@@ -3881,6 +3885,11 @@ static int bar(void *a) {
     return _mm256_testz_si256(x, x);
 }
 int main(int argc, char *argv[]) { return bar(argv[0]); }
+#ifdef __clang__
+#pragma clang attribute pop
+#else
+#pragma GCC pop_options
+#endif
 EOF
   if compile_object "-Werror" ; then
     avx2_opt="yes"
@@ -3899,8 +3908,12 @@ fi
 
 if test "$cpuid_h" = "yes" && test "$avx512f_opt" = "yes"; then
   cat > $TMPC << EOF
+#ifdef __clang__
+#pragma clang attribute push (__attribute__((target("avx512f"))), apply_to=function)
+#else
 #pragma GCC push_options
 #pragma GCC target("avx512f")
+#endif
 #include <cpuid.h>
 #include <immintrin.h>
 static int bar(void *a) {
@@ -3911,6 +3924,11 @@ int main(int argc, char *argv[])
 {
 	return bar(argv[0]);
 }
+#ifdef __clang__
+#pragma clang attribute pop
+#else
+#pragma GCC pop_options
+#endif
 EOF
   if ! compile_object "-Werror" ; then
     avx512f_opt="no"
diff --git a/util/bufferiszero.c b/util/bufferiszero.c
index 695bb4c..0bf1c06 100644
--- a/util/bufferiszero.c
+++ b/util/bufferiszero.c
@@ -64,13 +64,14 @@ buffer_zero_int(const void *buf, size_t len)
 }
 
 #if defined(CONFIG_AVX512F_OPT) || defined(CONFIG_AVX2_OPT) || defined(__SSE2__)
-/* Do not use push_options pragmas unnecessarily, because clang
- * does not support them.
- */
 #if defined(CONFIG_AVX512F_OPT) || defined(CONFIG_AVX2_OPT)
+#ifdef __clang__
+#pragma clang attribute push (__attribute__((target("sse2"))), apply_to=function)
+#else
 #pragma GCC push_options
 #pragma GCC target("sse2")
 #endif
+#endif
 #include <emmintrin.h>
 
 /* Note that each of these vectorized functions require len >= 64.  */
@@ -105,16 +106,24 @@ buffer_zero_sse2(const void *buf, size_t len)
     return _mm_movemask_epi8(_mm_cmpeq_epi8(t, zero)) == 0xFFFF;
 }
 #if defined(CONFIG_AVX512F_OPT) || defined(CONFIG_AVX2_OPT)
+#ifdef __clang__
+#pragma clang attribute pop
+#else
 #pragma GCC pop_options
 #endif
+#endif
 
 #ifdef CONFIG_AVX2_OPT
 /* Note that due to restrictions/bugs wrt __builtin functions in gcc <= 4.8,
  * the includes have to be within the corresponding push_options region, and
  * therefore the regions themselves have to be ordered with increasing ISA.
  */
+#ifdef __clang__
+#pragma clang attribute push (__attribute__((target("sse4"))), apply_to=function)
+#else
 #pragma GCC push_options
 #pragma GCC target("sse4")
+#endif
 #include <smmintrin.h>
 
 static bool
@@ -145,9 +154,19 @@ buffer_zero_sse4(const void *buf, size_t len)
     return _mm_testz_si128(t, t);
 }
 
+#ifdef __clang__
+#pragma clang attribute pop
+#else
 #pragma GCC pop_options
+#endif
+
+#ifdef __clang__
+#pragma clang attribute push (__attribute__((target("avx2"))), apply_to=function)
+#else
 #pragma GCC push_options
 #pragma GCC target("avx2")
+#endif
+
 #include <immintrin.h>
 
 static bool
@@ -176,12 +195,23 @@ buffer_zero_avx2(const void *buf, size_t len)
 
     return _mm256_testz_si256(t, t);
 }
+
+#ifdef __clang__
+#pragma clang attribute pop
+#else
 #pragma GCC pop_options
+#endif
+
 #endif /* CONFIG_AVX2_OPT */
 
 #ifdef CONFIG_AVX512F_OPT
+
+#ifdef __clang__
+#pragma clang attribute push (__attribute__((target("avx512f"))), apply_to=function)
+#else
 #pragma GCC push_options
 #pragma GCC target("avx512f")
+#endif
 #include <immintrin.h>
 
 static bool
@@ -210,9 +240,14 @@ buffer_zero_avx512(const void *buf, size_t len)
     return !_mm512_test_epi64_mask(t, t);
 
 }
+#ifdef __clang__
+#pragma clang attribute pop
+#else
 #pragma GCC pop_options
 #endif
 
+#endif
+
 
 /* Note that for test_buffer_is_zero_next_accel, the most preferred
  * ISA must have the least significant bit.
