diff --git a/src/dos/dos_programs.cpp b/src/dos/dos_programs.cpp
index e92ffc5..49ba0ee 100644
--- a/src/dos/dos_programs.cpp
+++ b/src/dos/dos_programs.cpp
@@ -81,7 +81,7 @@ host_cnv_char_t *CodePageGuestToHost(const char *s);
 #endif
 #ifdef C_ICONV
 #include "iconvpp.hpp"
-typedef uint16_t test_char_t;
+typedef char16_t test_char_t;
 typedef std::basic_string<test_char_t> test_string;
 typedef std::basic_string<char> test_char;
 #endif
@@ -6761,7 +6761,7 @@ class IMGMOUNT : public Program {
 					emd->diskSizeK = ((sizes[0]*sizes[1]*sizes[2]*sizes[3])+512)/1024;
 					emd->UpdateFloppyType();
 				}
-				LOG_MSG("Mounted empty C/H/S/sz %u/%u/%u/%u %uKB",emd->cylinders,emd->heads,emd->sectors,emd->sector_size,emd->diskSizeK);
+				LOG_MSG("Mounted empty C/H/S/sz %u/%u/%u/%u %luKB",emd->cylinders,emd->heads,emd->sectors,emd->sector_size,emd->diskSizeK);
 				return emd;
 			}
 
@@ -7811,7 +7811,7 @@ void UTF16::Run()
             wch=new test_char_t[c+1];
             for (unsigned int i=0; i<c; i++) wch[i]=(test_char_t)text[i];
             wch[c]=0;
-            if (CodePageHostToGuestUTF16(temp,wch)) {
+            if (CodePageHostToGuestUTF16(temp,(const uint16_t*)wch)) {
                 WriteOut_NoParsing(temp, true);
             } else {
                 x->set_src(wch);
diff --git a/src/dos/drive_iso.cpp b/src/dos/drive_iso.cpp
index 4afa14e..5a3a61f 100644
--- a/src/dos/drive_iso.cpp
+++ b/src/dos/drive_iso.cpp
@@ -1762,7 +1762,7 @@ int isoDrive::readDirEntry(isoDirEntry* de, const uint8_t* data,unsigned int dir
 				// The string is big Endian UCS-16, convert to host Endian UCS-16
 				for (size_t i=0;((const uint16_t*)de->ident)[i] != 0;i++) ((uint16_t*)de->ident)[i] = be16toh(((uint16_t*)de->ident)[i]);
 				// finally, convert from UCS-16 to local code page, using C++ string construction to make a copy first
-				CodePageHostToGuestUTF16((char*)de->ident,std::basic_string<uint16_t>((const uint16_t*)de->ident).c_str());
+				CodePageHostToGuestUTF16((char*)de->ident,(const uint16_t*)std::basic_string<char16_t>((const char16_t*)de->ident).c_str());
 			}
 		}
 	} else {
@@ -1784,7 +1784,7 @@ int isoDrive::readDirEntry(isoDirEntry* de, const uint8_t* data,unsigned int dir
 			// The string is big Endian UCS-16, convert to host Endian UCS-16
 			for (size_t i=0;((const uint16_t*)de->ident)[i] != 0;i++) ((uint16_t*)de->ident)[i] = be16toh(((uint16_t*)de->ident)[i]);
 			// finally, convert from UCS-16 to local code page, using C++ string construction to make a copy first
-			CodePageHostToGuestUTF16((char*)de->ident,std::basic_string<uint16_t>((const uint16_t*)de->ident).c_str());
+			CodePageHostToGuestUTF16((char*)de->ident,(const uint16_t*)std::basic_string<char16_t>((const char16_t*)de->ident).c_str());
 		}
 		else {
 			// remove any file version identifiers as there are some cdroms that don't have them
