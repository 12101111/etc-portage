From 49b9728157cb5c9b032515f04b70b41cbdff70e3 Mon Sep 17 00:00:00 2001
From: Nikita Popov <nikita.ppv@gmail.com>
Date: Thu, 11 Mar 2021 22:01:36 +0100
Subject: [PATCH] Fix atomic handling in "[LICM] Make promotion faster"

This is a combined cherry-pick of
29482426b58e3c0e81ffe6b69c08067b3adc6461 and
403da6a69abc357066117370a5b80e03594b81a6 to fix handling of atomics.
---
 llvm/include/llvm/Analysis/AliasSetTracker.h |  1 -
 llvm/lib/Analysis/AliasSetTracker.cpp        |  1 +
 llvm/lib/Transforms/Scalar/LICM.cpp          | 13 ++------
 llvm/test/Transforms/LICM/promote-atomic.ll  | 34 ++++++++++++++++++++
 4 files changed, 38 insertions(+), 11 deletions(-)
 create mode 100644 llvm/test/Transforms/LICM/promote-atomic.ll

diff --git a/llvm/include/llvm/Analysis/AliasSetTracker.h b/llvm/include/llvm/Analysis/AliasSetTracker.h
index fe46afa3a5377..ee6c371435e74 100644
--- a/llvm/include/llvm/Analysis/AliasSetTracker.h
+++ b/llvm/include/llvm/Analysis/AliasSetTracker.h
@@ -20,7 +20,6 @@
 #include "llvm/ADT/DenseMapInfo.h"
 #include "llvm/ADT/ilist.h"
 #include "llvm/ADT/ilist_node.h"
-#include "llvm/Analysis/AliasAnalysis.h"
 #include "llvm/Analysis/MemoryLocation.h"
 #include "llvm/IR/Instruction.h"
 #include "llvm/IR/Metadata.h"
diff --git a/llvm/lib/Analysis/AliasSetTracker.cpp b/llvm/lib/Analysis/AliasSetTracker.cpp
index f9123ec091b66..347bcd0b4a379 100644
--- a/llvm/lib/Analysis/AliasSetTracker.cpp
+++ b/llvm/lib/Analysis/AliasSetTracker.cpp
@@ -11,6 +11,7 @@
 //===----------------------------------------------------------------------===//
 
 #include "llvm/Analysis/AliasSetTracker.h"
+#include "llvm/Analysis/AliasAnalysis.h"
 #include "llvm/Analysis/GuardUtils.h"
 #include "llvm/Analysis/LoopInfo.h"
 #include "llvm/Analysis/MemoryLocation.h"
diff --git a/llvm/lib/Transforms/Scalar/LICM.cpp b/llvm/lib/Transforms/Scalar/LICM.cpp
index 853b0ccd9c438..c518aa6b784cc 100644
--- a/llvm/lib/Transforms/Scalar/LICM.cpp
+++ b/llvm/lib/Transforms/Scalar/LICM.cpp
@@ -2286,16 +2286,9 @@ collectPromotionCandidates(MemorySSA *MSSA, AliasAnalysis *AA, Loop *L,
     if (AttemptingPromotion.contains(I))
       return;
 
-    if (Optional<MemoryLocation> Loc = MemoryLocation::getOrNone(I)) {
-      llvm::erase_if(Sets, [&](const AliasSet *AS) {
-        return AS->aliasesPointer(Loc->Ptr, Loc->Size, Loc->AATags, *AA)
-               != NoAlias;
-      });
-    } else {
-      llvm::erase_if(Sets, [&](const AliasSet *AS) {
-        return AS->aliasesUnknownInst(I, *AA);
-      });
-    }
+    llvm::erase_if(Sets, [&](const AliasSet *AS) {
+      return AS->aliasesUnknownInst(I, *AA);
+    });
   });
 
   SmallVector<SmallSetVector<Value *, 8>, 0> Result;
diff --git a/llvm/test/Transforms/LICM/promote-atomic.ll b/llvm/test/Transforms/LICM/promote-atomic.ll
new file mode 100644
index 0000000000000..86107d738cea6
--- /dev/null
+++ b/llvm/test/Transforms/LICM/promote-atomic.ll
@@ -0,0 +1,34 @@
+; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
+; RUN: opt -S -licm < %s | FileCheck %s
+
+%class.LiveThread = type { i64, %class.LiveThread* }
+
+@globallive = external dso_local global i64, align 8
+
+; The store should not be sunk (via scalar promotion) past the cmpxchg.
+
+define void @test(%class.LiveThread* %live_thread) {
+; CHECK-LABEL: @test(
+; CHECK-NEXT:    [[NEXT_UNPROCESSED_:%.*]] = getelementptr inbounds [[CLASS_LIVETHREAD:%.*]], %class.LiveThread* [[LIVE_THREAD:%.*]], i64 0, i32 1
+; CHECK-NEXT:    br label [[LOOP:%.*]]
+; CHECK:       loop:
+; CHECK-NEXT:    store %class.LiveThread* undef, %class.LiveThread** [[NEXT_UNPROCESSED_]], align 8
+; CHECK-NEXT:    [[XCHG:%.*]] = cmpxchg weak i64* @globallive, i64 undef, i64 undef release monotonic, align 8
+; CHECK-NEXT:    [[DONE:%.*]] = extractvalue { i64, i1 } [[XCHG]], 1
+; CHECK-NEXT:    br i1 [[DONE]], label [[EXIT:%.*]], label [[LOOP]]
+; CHECK:       exit:
+; CHECK-NEXT:    ret void
+;
+  %next_unprocessed_ = getelementptr inbounds %class.LiveThread, %class.LiveThread* %live_thread, i64 0, i32 1
+  br label %loop
+
+loop:
+  store %class.LiveThread* undef, %class.LiveThread** %next_unprocessed_, align 8
+  %xchg = cmpxchg weak i64* @globallive, i64 undef, i64 undef release monotonic, align 8
+  %done = extractvalue { i64, i1 } %xchg, 1
+  br i1 %done, label %exit, label %loop
+
+exit:
+  ret void
+}
+
